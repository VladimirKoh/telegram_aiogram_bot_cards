import random
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMedia
from aiogram.dispatcher.filters import Text
from aiogram.utils.exceptions import MessageNotModified
from aiogram.dispatcher import FSMContext
from contextlib import suppress
from dotenv import load

from utils import *
from keyboards import *
import mysql
import os


load()


storage = MemoryStorage()
bot = Bot(token=os.getenv('TOKEN'), parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot=bot, storage=storage)


@dp.message_handler(commands=['start'])
async def command_start(message: types.Message):
    if not mysql.get_user(message.from_user.id):
        mysql.add_user(message.from_user.id)
    await message.answer("–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è –≤ CAROHOLICS!\nCAROHOLICS-—ç—Ç–æ –∫–∞—Ä—Ç–æ—á–Ω–∞—è –∏–≥—Ä–∞ –¥–ª—è –ª—é–±–∏—Ç–µ–ª–µ–π –∞–≤—Ç–æ–∏–Ω–¥—É—Å—Ç—Ä–∏–∏\n–°–æ–±–∏—Ä–∞–π –∫–æ–ª–ª–µ–∫—Ü–∏—é –ª—é–±–∏–º—ã—Ö –º–∞—à–∏–Ω, –∫–æ–ø–∏ –æ—á–∫–∏ –∏ —Å–æ—Ä–µ–≤–Ω—É–π—Å—è —Å –¥—Ä—É–∑—å—è–º–∏!\n–ù–∞—á–Ω—ë–º?",
                         reply_markup=get_general_keyboard())

    

@dp.message_handler(Text(equals='üöô –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É'))
async def command_get_card(message: types.Message):
    card_id = random.randint(1, 138) 
    mysql.add_card(card_id, message.from_user.id)
    all_cards = mysql.get_cards_user(message.from_user.id)
    count_cards = sum([i['get_point'] for i in all_cards])
    card = [i for i in all_cards if i['id'] == card_id][0]
    await message.answer_photo(photo=open(card['url'], 'rb'), caption=f"üöô –ó–∞–±–∏—Ä–∞–π —Å–≤–æ—é –Ω–æ–≤—É—é —Ç–∞—á–∫—É!\n\nüíé –†–µ–¥–∫–æ—Å—Ç—å: {convert_type(card['type_card'])} +{card['get_point']} pts\nüè† –í—Å–µ–≥–æ —É —Ç–µ–±—è: {count_cards} pts")


async def update_media(message: types.Message, photo, page_all, page_now, description):
    with suppress(MessageNotModified):
        media_ = InputMedia(type='photo', media=photo, caption=description)
        await message.edit_media(media_, reply_markup=get_pagination(page_now, page_all))


async def update_message(message: types.Message, text: str, keyboard: InlineKeyboardMarkup):
    with suppress(MessageNotModified):
        await message.edit_text(text, reply_markup=keyboard())

@dp.message_handler(Text(equals="üè† –ú–æ–π –≥–∞—Ä–∞–∂"))
async def command_my_garazhe(message: types.Message, state: FSMContext):
    result = mysql.get_cards_user(message.from_user.id)
    count_points = sum([i['get_point'] for i in result])
    page_all = len(result)
    description = f"üöô –ú–æ–∏ –∫–∞—Ä—Ç—ã\n\nüè† –í—Å–µ–≥–æ –æ—á–∫–æ–≤ {count_points}"
    async with state.proxy() as data:
        data['page'] = 0
        data['page_all'] = page_all
        data['data'] = result
        data['count_points'] = count_points
    print(data['data'])
    await message.answer_photo(open(result[0]['url'], 'rb'),
                               caption=description,
                               reply_markup=get_pagination(data['page'], data['page_all']))


@dp.message_handler(Text(equals="üèü Universe"))
async def command_menu(message: types.Message):
    await message.answer('üí¨ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ', reply_markup=get_universe_keyboard())


@dp.callback_query_handler(Text(equals='games'))
async def callback_games(callback: types.CallbackQuery):
    await callback.answer('–ò–≥—Ä—ã')
    text = "üí¨ –í—ã–±–µ—Ä–µ—Ç–µ –∏–≥—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞"
    await update_message(callback.message, text, get_games_keyboard)


@dp.callback_query_handler(Text(equals='next'))
async def callback_next(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if data['page_all'] > data['page'] + 1:
            data['page'] += 1
            url_photo = data['data'][data['page']]['url']
            description = f"üöô –ú–æ–∏ –∫–∞—Ä—Ç—ã\n\nüè† –í—Å–µ–≥–æ –æ—á–∫–æ–≤ {data['count_points']}"
            await update_media(callback.message, photo=open(url_photo, 'rb'), page_all=data['page_all'], page_now=data['page'], description=description)


@dp.callback_query_handler(Text(equals='back'))
async def callback_back(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if data['page'] > 0:
            data['page'] -= 1
            url_photo = data['data'][data['page']]['url']
            description = f"üöô –ú–æ–∏ –∫–∞—Ä—Ç—ã\n\nüè† –í—Å–µ–≥–æ –æ—á–∫–æ–≤ {data['count_points']}"
            await update_media(callback.message, photo=open(url_photo, 'rb'), page_all=data['page_all'], page_now=data['page'], description=description)


@dp.callback_query_handler(Text(equals='game_cube'))
async def command_play(callback: types.CallbackQuery):
    result = await bot.send_dice(chat_id=callback.from_user.id, emoji="üé≤")
    number = result.dice.value
    await callback.message.answer(f'–ù–∞ üé≤ –∫—É–±–∏–∫–µ —á–∏—Å–ª–æ <b>{number}</b>\n\n–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ <b>{number}</b> –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç')
    # –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫ - –∫–æ–ª–∏—á—Å—Ç–≤–æ –Ω–∞ –∫—É–±–∏–∫–µ


@dp.callback_query_handler(Text(equals='game_kazino'))
async def command_kazino(callback: types.CallbackQuery):
    text = f"üé∞ –¢—ã –ø–æ–ª—É—á–∏—à—å <b>10</b> –ø–æ–ø—ã—Ç–æ–∫, –µ—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç –≤—ã–¥–∞—Å—Ç <b>3</b> –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞.\n\n\nüí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ - <b>50 —Ä—É–±–ª–µ–π</b>\n\n–ú–∞–∫—Å–∏–º—É–º –≤ –¥–µ–Ω—å –∏–≥—Ä: <b>14</b>\n\nüí∞ –ë—Ä–æ, —É —Ç–µ–±—è –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: <b>0 —Ä—É–±</b>"
    await update_message(callback.message, text, get_kazino_keyboard)


@dp.callback_query_handler(Text(equals='game_kazino_play'))
async def command_play_kazino(callback: types.CallbackQuery):
    result = await bot.send_dice(chat_id=callback.from_user.id, emoji="üé∞") # 43-(lime), 64-(777), 1-(bar bar bar), 22-(sliva)
    # –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ 50 —Ä—É–±–ª–µ–π
    if result.dice.value in [1, 43, 64, 22]:
        await callback.message.answer(f'–í—ã –≤—ã–∏–≥–∞–ª–∏ 10 –ø–æ–ø—ã—Ç–æ–∫\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑', reply_markup=get_kazino_keyboard())
        # –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ 10 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    else:
        await callback.message.answer(f'–ù–µ –ø–æ–≤–µ–∑–ª–æ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑', reply_markup=get_kazino_keyboard())


@dp.callback_query_handler(Text(equals='game_bouling'))
async def command_bouling(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['bouling'] = 5
    text = f"üé≥ –¢—ã –ø–æ–ª—É—á–∏—à—å 1 –ø–æ–ø—ã—Ç–∫—É, –µ—Å–ª–∏ —Å–æ–±—ä–µ—à—å –≤—Å–µ –∫–µ–≥–ª–∏ –∑–∞ 5 –∏–≥—Ä.\n\n\nüí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å 1 –∏–≥—Ä—ã (5 –±—Ä–æ—Å–∫–æ–≤) - <b>100 —Ä—É–±–ª–µ–π</b>\n\n–ú–∞–∫—Å–∏–º—É–º –≤ –¥–µ–Ω—å –ø–æ–∫—É–ø–æ–∫: <b>1</b>\n\nüí∞ –ë—Ä–æ, —É —Ç–µ–±—è –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: <b>0 —Ä—É–±</b>"
    await update_message(callback.message, text, get_bouling_keyboard)



@dp.callback_query_handler(Text(equals='game_bouling_play'))
# –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á—Ç–æ –∫—É–ø–∏—Ç—å —ç—Ç–æ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑ –≤ –¥–µ–Ω—å
async def command_play_bouling(callback: types.CallbackQuery, state: FSMContext):
    # –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ —Å –±–∞–ª–∞—Å–∞ 100 —Ä—É–±–ª–µ–π -> –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–º—É 5 –ø–æ–ø—ã—Ç–æ–∫
    async with state.proxy() as data:
        if data['bouling'] == 0:
            await callback.message.delete()
            await callback.message.answer('–¢—ã –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–ª –ª–∏–º–∏—Ç –∏–≥—Ä', reply_markup=get_bouling_keyboard())
        else:
            data['bouling'] -= 1
            result = await bot.send_dice(chat_id=callback.from_user.id, emoji="üé≥")
            number = result.dice.value
            if number == 6:
                await callback.message.answer('–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 1 –ø–æ–ø—ã—Ç–∫—É', reply_markup=get_bouling_keyboard())
            else:
                await callback.message.answer('–ù–µ—É–¥–∞—á–∞, –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑', reply_markup=get_bouling_keyboard())

        
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)